<div>
    <a class="btn btn-sm btn-info"
       routerLink="/reactive/explanations"><< Back</a>
    <main role="main" class="container">
        <div class="jumbotron heading">
            <markdown>
                How do we build _Reactive_ systems?
                ---
            </markdown>
            <p class="lead">
                How is the gap from traditional to reactive systems closed?
            </p>
        </div>
        <div>
            <markdown>

                This can be done by utilizing a <span style="font-weight: bold">Non-Blocking</span> programming paradigm.
                A <span style="font-weight: bold">push-based</span> system does not necessarily need to block work from happening.
                When data is processed in time, then it will be directed to where it needs to go.
                Where as <span style="font-weight: bold">pull-based</span>  call says,

                > Hey, you cannot continue down the rest of this code until this one thing happens.

                Which essentially <span style="font-weight: bold">blocks</span>  the program's flow until it can continue to be processed.

                The reactive programming paradigm is often presented in object-oriented languages as an extension of the Observer design pattern.

                One can also compare the main reactive streams pattern with the familiar Iterator design pattern.
                There is a duality to the Iterable-Iterator pair and Reactive Streams.

                One major difference is that, an Iterator is **pull-based**, while reactive streams are **push-based**.
                Using an iterator is an imperative programming pattern,
                even though the method of accessing values is solely the responsibility of the Iterable.

                Indeed, it is up to the developer to choose when to access the `next()` item in the sequence.
                In reactive streams, the equivalent of the former pair is <span style="font-weight: bold">Publisher-Subscriber</span>.
                It is the `Publisher` that notifies the `Subscriber` of any newly available values as they come.
                The push aspect of this paradigm is the key to being reactive.

                Also, operations applied to pushed values are expressed declaratively rather than imperatively:
                the programmer expresses the logic of the computation rather than describing its exact control flow.

                In addition to pushing values, the error handling and completion aspects are also covered in a well defined manner.
                A Publisher can push new values to its Subscriber, but can also signal an error, or completion.
                Both errors and completion terminate the sequence of events created from the publisher.

                Rather than blocking to wait for a method to return, just have the data sent over once it is ready.
                That way work can be done while that data is getting ready to be processed.

                _Push-Based_ programming lends itself to asynchrony.
                Which is needed in order to enable the efficient parallel use of computing resources,
                on collaborating network hosts or multiple CPU cores within a single machine.

                It also makes it easier to avoid issues with thread contention as most of the code is processed inside of a **event loop**

                Wikipedia is nice and gives a handy definition of an event loop:

                >The event loop, message dispatcher, message loop, message pump, or run loop is a programming construct that waits for and dispatches events or messages in a program.
                It works by making a request to some internal or external "event provider" (that generally blocks the request until an event has arrived), and then it calls the relevant event handler ("dispatches the event")

                The reactor design pattern is an event handling pattern for handling service requests delivered concurrently to a service handler by one or more inputs.
                The service handler then demultiplexes the incoming requests and dispatches them synchronously to the associated request handlers.
            </markdown>
            <div class="btn btn-outline-info" routerLink="/reactive/concepts/visualisations/demultiplex">Here is a visual example of what a demultiplexer does</div>
            <markdown>

                The term <span style="font-weight: bold">Actor</span> is also another term to be familiar with.
                An actor is a computational entity that, in response to a message it receives, can concurrently:

                - Send a finite number of messages to other actors;
                - Create a finite number of new actors;
                - Designate the behavior to be used for the next message it receives.

                Having a few a event loop threads that do not block and are always processing work is the key to reaching maximum efficiency.

                Handling streams of data—especially “live” data whose volume is not predetermined—requires special care in an asynchronous system.
                The most prominent issue is that resource consumption needs to be controlled such that, a fast data source does not overwhelm the stream destination.

                The main goal of Reactive Streams is to govern the exchange of stream data across an asynchronous boundary—think passing elements on to another thread or thread-pool.
                While ensuring that the receiving side is not forced to buffer arbitrary amounts of data.

                All of this should explain _why_ spring states that they created the WebFlux library.

                <div class="blockquote">
                    Part of the answer is the need for a non-blocking web stack to handle concurrency with a small number of threads and scale with less hardware resources.
                    Servlet 3.1 did provide an API for non-blocking I/O.
                    However, using it leads away from the rest of the Servlet API where contracts are synchronous (Filter, Servlet) or blocking (getParameter, getPart).
                    This was the motivation for a new common API to serve as a foundation across any non-blocking runtime.
                    That is important because of servers such as Netty that are well established in the async, non-blocking space.
                </div>

                <div class="blockquote">
                    The other part of the answer is functional programming.
                    Much like the addition of annotations in Java 5 created opportunities — e.g. annotated REST controllers or unit tests, the addition of lambda expressions in Java 8 created opportunities for functional APIs in Java.
                    This is really helpful for non-blocking applications and continuation style APIs — as popularized by CompletableFuture and ReactiveX, that allow declarative composition of asynchronous logic.
                    At the programming model level Java 8 enabled Spring WebFlux to offer functional web endpoints alongside with annotated controllers.
                </div>

                <div class="blockquote">
                    There is also another important mechanism that we on the Spring team associate with "reactive" and that is non-blocking back pressure.
                    In synchronous, imperative code, blocking calls serve as a natural form of back pressure that forces the caller to wait.
                    In non-blocking code it becomes important to control the rate of events so that a fast producer does not overwhelm its destination.
                </div>

                ---

                ### Moving from synchronous Imperative to asynchronous Reactive Programming
                ![Learning curve](https://raw.githubusercontent.com/cyclic-reference/spring-webflux/master/assets/the_learning_curve.png)

                Granted there is a bit of a learning curve to adopting non-blocking, functional, and declarative programming.

                It requires a different mindset compared to imperative programming.

                I like to think of imperative programming as kicking a ball to it's destination.
                Where the balls only moves when you reach it again to be able to kick it again.

                Where as reactive programming is like having to roll a ball down a hill to get where it needs to go.
                If you want the ball to go where you want it, you have to set up walls and obstacles ahead of time to guide it.
                Essentially letting it _flow_through the constructs that where set up.

                Replace ball with data, and it is almost the same thing.
                Reactive programming, is about setting up sequences that manipulate data as it flows. When it flows, is up in the air at run time.
                The best we can do is set up our functions (constructs) that manipulate the data as it flows through the sequences we build.

                Reactive streams are very much like the Java 8 stream API.

                Here are some of the characteristics of reactive steams:

                - Data as a flow, is manipulated with a rich vocabulary of operators
                - Nothing happens until you subscribe
                - _Backpressure_: which is the ability for the consumer to signal the producer that the rate of emission is too high (buffering)
                - High level and a high value abstraction that is concurrency-agnostic

                ##### Types of Sequences

                In the Rx family of reactive libraries,
                one can distinguish two broad categories of reactive sequences: **hot** and **cold**.
                This distinction mainly has to do with how the reactive stream reacts to subscribers:

                - <span style="font-weight: bold">Cold sequences</span>: starts anew for each Subscriber, including at the source of data.
                Every subscriber will see the entire sequence.
            </markdown>
            <div class="btn btn-outline-info" routerLink="/reactive/concepts/visualisations/sequences/cold">Here is a visual example of how a Cold Sequence works</div>
            <markdown>

                If the source wraps an HTTP call, a new HTTP request is made for each subscription.
                - <span style="font-weight: bold">Hot sequences</span>: do not start from from the beginning for every Subscriber.
                Rather, late subscribers receive only signals emitted after they subscribed.
                If a publisher was already producing, then the subscriber would only see the items currently being produced after subscription.
                >Note, however, that some hot reactive streams can cache or replay the history of emissions totally or partially.
                From a general perspective, a hot sequence can even emit when no subscriber is listening
                (an exception to the "nothing happens before you subscribe" rule).
            </markdown>
            <div class="btn btn-outline-info" routerLink="/reactive/concepts/visualisations/sequences/hot">Here is a visual example of how a Hot Sequence works</div>
        </div>
        <a style="margin-top: 1em;" class="btn btn-sm btn-info"
           routerLink="/reactive/explanations"><< Back</a>
    </main>

</div>
