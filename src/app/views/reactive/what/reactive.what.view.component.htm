<div>
    <main role="main" class="container">
        <div class="jumbotron heading">
            <markdown>
                What does being _Reactive_ mean?
                ---
            </markdown>
            <p class="lead">
                It means many things to many people.
            </p>
        </div>
        <div>
            <div>
                Project Reactor (which is what Spring WebFlux is built on top of) defines it as:
            </div>

            <div class="blockquote">
                An asynchronous programming paradigm concerned with data streams and the propagation of change.
                This means that it becomes possible to express static (e.g. arrays) or dynamic (e.g. event emitters)
                data streams with ease via the employed programming language(s).
            </div>


            While the folks over at Spring says that it:

            <markdown>
                Refers to programming models that are built around reacting to change: network component reacting to:

                    - I/O events
                    - UI controller reacting to mouse events
                    - etc.

                In that sense, non-blocking is reactive because instead of being blocked we are now in the mode of
                reacting to notifications as operations complete or data becomes available.
            </markdown>


            <markdown>
                ----

                There is even a **Reactive Manifesto** which defines *Reactive Systems* as the following:

                <div class="blockquote">
                    Systems that are Responsive, Resilient, Elastic and Message Driven.
                </div>


                Responsive
                ---

                Responsiveness means any request is _almost_ always handled in a timely manner.

                This is the cornerstone of usability and utility.
                Even more than that, responsiveness allows for problems to be detected quickly and dealt with effectively.

                Responsive systems focus on providing rapid and reply times that remain consistent.
                So that the bar for quality remains high in consistently delivering quality service.

                This consistent behaviour in turn simplifies error handling, builds end-user confidence, and encourages further interaction.

                Resilient
                ---

                Goes hand in hand with *Responsiveness*, in that system always replies, even in the face of failure.
                Any system that is not resilient will be unresponsive after a failure including systems that are highly-available or mission-critical.
                Resilience is achieved by replication, containment, isolation and delegation.

                Failures are contained within each component, isolating components from each other and thereby ensuring that parts of the system can fail and recover without compromising the system as a whole.
                Recovery of each component is delegated to another (external) component and high-availability is ensured by replication where necessary.
                The client of a component is not burdened with handling its failures.

                Elastic
                ---

                The system stays remains consistent under varying workload.
                Reacting to changes in the input rate by increasing or decreasing the resources allocated, in order to service these inputs.

                This implies designs that have no contention points or central bottlenecks.
                Which results in the ability to shard or replicate components and distribute inputs among them.

                Reactive Systems support predictive, as well as Reactive, scaling algorithms by providing relevant live performance measures.
                They achieve elasticity in a cost-effective way on commodity hardware and software platforms.

                Message Driven
                ---

                Reactive Systems rely on asynchronous message-passing to establish a boundary between components.
                Which ensures loose coupling, isolation, and location transparency.

                This boundary also that failures can be propagated and delegated as messages.
                Employing explicit message-passing enables load management, elasticity, and flow control from shaping and monitoring the message queues in the system and applying _back-pressure_ when necessary.

                Transparent location messaging, as a means of communication, enables the management of failure to work across a cluster or within a single host with the same constructs and semantics .
                Non-blocking communication allows recipients to only consume resources while active, leading to less system overhead.

                -----

                Handling streams of data—especially “live” data whose volume is not predetermined—requires special care in an asynchronous system.
                The most prominent issue is that resource consumption needs to be controlled such that, a fast data source does not overwhelm the stream destination.

                The main goal of Reactive Streams is to govern the exchange of stream data across an asynchronous boundary—think passing elements on to another thread or thread-pool.
                While ensuring that the receiving side is not forced to buffer arbitrary amounts of data.

            </markdown>

        </div>
    </main>
    <div class="btn btn-warning" routerLink="/">Go home bruv</div>
</div>
